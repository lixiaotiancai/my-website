let mock_data = [{
  "id": 1,
  "date": +new Date('2019-1-4'),
  "visit": 150,
  "title": `欢迎来到我的个人网站~`,
  "cover": 'https://lixiaotiancai.github.io/images/firstBlogPic.jpg',
  "intro": '欢迎来到我的个人网站~点进来看看啊~~',
  "content": `
  <h1>欢迎来到我的个人网站</h1>
  <p>前个人博客地址为"https://lixiaotiancai.github.io"，采用的是hexo+github page的形式。这种博客优点就是轻量，很快就能搭建好，发布也很方便，也很美观。但是缺点也是有的，比如这种博客是纯静态的，不支持后台比如用户的注册登录等，而且使用的是人家现成的框架，感觉终究不是自己的东西。。。</p><br />
  <p>所以经过深思熟虑，蓄谋已久，决定废弃前个人博客，从0开始自己亲手搭建一个个人网站</p><br />
  <p>虽然可能网站不够美观，使用的技术也不够成熟，但是这毕竟是我自己的东西，是一个代码一个代码自己亲手敲出来的，亲自踩坑亲自填</p><br />
  <p>网站目前还在建设中，目前还没有一个后台管理系统，都是使用mock data的形式来模拟后台数据</p><br />
  <p>从原个人博客中选了几篇看起来还凑合的，毕竟原博客写的有段时间了，现在自己看自己俩月前写的代码或者对前端的认识都会觉得好菜，更别提看自己将近半年前的博客了</p><br />
  <p>网站的下一步规划，先赶紧把后台管理系统搭建好，这样就可以方便对博客进行增删查改了</p><br />
  <p>~~~</p><br />
  <img src="https://lixiaotiancai.github.io/images/firstBlogPic.jpg"></img>
  `
}, {
  "id": 2,
  "date": +new Date('2018-3-14'),
  "visit": 100,
  "title": `codewars修行之旅`,
  "cover": 'https://lixiaotiancai.github.io/images/firstBlogPic.jpg',
  "intro": 'codewars修行之旅',
  "content": `
  <h1>codewars修行之旅</h1>
  <p>想练习一下荒废多年的算法，在codewars上刷题，遇到好的题目就来记录一下</p>
<p>题目：Input:”is2 Thi1s T4est 3a”<br>      Output:”Thi1s is2 3a T4est”</p>
<p>是一道简单的字符串排序题，思路就是先找出每个单词中的数字，再用<code>.sort()</code>函数进行排序，但引出了很多东西</p>
<p>code：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function findNumber(str)&#123;  </span><br><span class="line">    for(var i=0;i&lt;str.length;i++)&#123;  </span><br><span class="line">        var chr = str.charAt(i);  </span><br><span class="line">        if(!isNaN(chr))&#123;  </span><br><span class="line">            return parseInt(chr);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">function order(words)&#123;  </span><br><span class="line">    return words.split(&quot; &quot;).sort(function(a,b)&#123;  </span><br><span class="line">        return findNumber(a) - findNumber(b);  </span><br><span class="line">    &#125;).join(&quot; &quot;);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先开头定义了一个辅助函数，用于找出每个单词中的数字。</p>
<p><code>str.charAt(i)</code>函数是用于返回字符长度为 1 的字符串，在本题中效果和<code>str[i]</code>是一样的，两者不同的是当该字符不存在时（比如i&gt;=str.length）,str.charAt()函数返回的是一个空字符串’’，而str[]返回的是一个undefined，在某些情况下可能会造成错误，所以尽量养成使用<code>str.charAt()</code>来返回长度为1的字符串的习惯。</p>
<p>!isNaN 判断是不是数字这就没什么好说的了。</p>
<p><code>parseInt(string,radix)</code>函数，用于解析字符串中的数字，radix参数是设置进制，需要注意如下几点：<br>只有字符串中的第一个数字会被返回。（parseInt(‘23asdsadasd46456’) 返回23）<br>开头和结尾的空格是允许的。（parseInt(‘           73’)返回73）<br>如果字符串的第一个字符不能被转换为数字，那么 parseFloat() 会返回 NaN。（parseInt(‘sada2332sad’）返回NaN)</p>
<p><code>.split()</code>和<code>.join()</code>两个是一对，用于分割字符串</p>
<p><code>sort(sortby)</code>函数比较重要，sortby参数用于设定排序规则，必须要是一个function，不设置该参数时默认为按开头字母进行排序。</p>
<p>eg1：</p>
<p>input：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">var arr = new Array(6)</span><br><span class="line">arr[0] = &quot;George&quot;</span><br><span class="line">arr[1] = &quot;John&quot;</span><br><span class="line">arr[2] = &quot;Thomas&quot;</span><br><span class="line">arr[3] = &quot;James&quot;</span><br><span class="line">arr[4] = &quot;Adrew&quot;</span><br><span class="line">arr[5] = &quot;Martin&quot;</span><br><span class="line"></span><br><span class="line">document.write(arr + &quot;&lt;br /&gt;&quot;)</span><br><span class="line">document.write(arr.sort())</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">George,John,Thomas,James,Adrew,Martin</span><br><span class="line">Adrew,George,James,John,Martin,Thomas</span><br></pre></td></tr></table></figure></p>
<p>eg2:<br>input:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">var arr = new Array(6)</span><br><span class="line">arr[0] = &quot;10&quot;</span><br><span class="line">arr[1] = &quot;5&quot;</span><br><span class="line">arr[2] = &quot;40&quot;</span><br><span class="line">arr[3] = &quot;25&quot;</span><br><span class="line">arr[4] = &quot;1000&quot;</span><br><span class="line">arr[5] = &quot;1&quot;</span><br><span class="line"></span><br><span class="line">document.write(arr + &quot;&lt;br /&gt;&quot;)</span><br><span class="line">document.write(arr.sort())</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10,5,40,25,1000,1</span><br><span class="line">1,10,1000,25,40,5</span><br></pre></td></tr></table></figure></p>
<p>这是不对的，因为但不设置sortby参数时默认对字母进行排序，当要对数字（字符串数字，当不是字符串时的Number数组还是可以直接sort()排序的）进行排序或者想按照自己的规则进行排序时必须要对sortby参数进行设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">function sortNumber(a,b)</span><br><span class="line">&#123;</span><br><span class="line">return a - b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var arr = new Array(6)</span><br><span class="line">arr[0] = &quot;10&quot;</span><br><span class="line">arr[1] = &quot;5&quot;</span><br><span class="line">arr[2] = &quot;40&quot;</span><br><span class="line">arr[3] = &quot;25&quot;</span><br><span class="line">arr[4] = &quot;1000&quot;</span><br><span class="line">arr[5] = &quot;1&quot;</span><br><span class="line"></span><br><span class="line">document.write(arr + &quot;&lt;br /&gt;&quot;)</span><br><span class="line">document.write(arr.sort(sortNumber))</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10,5,40,25,1000,1</span><br><span class="line">1,5,10,25,40,1000</span><br></pre></td></tr></table></figure>
<p>这样就对了，如果要降序的话ab位置调一下就行了。</p>
<p>那么怎么制定自己的规则呢，假如我们现在要根据一群人的年龄大小进行排序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var arr = [</span><br><span class="line">    &#123;name:&apos;lixiao&apos;,age:23&#125;,</span><br><span class="line">    &#123;name:&apos;oldlixiao&apos;,age:88&#125;,</span><br><span class="line">    &#123;name:&apos;younglixiao&apos;,age:3&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">function sortAge(a,b)&#123;</span><br><span class="line">    var value1 = a[&apos;age&apos;];</span><br><span class="line">    var value2 = b[&apos;age&apos;];</span><br><span class="line">    return value1 - value2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(arr.sort(sortAge));</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0:&#123;name: &quot;younglixiao&quot;, age: 3&#125;</span><br><span class="line">1:&#123;name: &quot;lixiao&quot;, age: 23&#125;</span><br><span class="line">2:&#123;name: &quot;oldlixiao&quot;, age: 88&#125;</span><br></pre></td></tr></table></figure>
<p>可以了。</p>
<p>再看看大神的代码，感觉真的是山外有山<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function order(words)&#123;</span><br><span class="line">  </span><br><span class="line">  return words.split(&apos; &apos;).sort(function(a, b)&#123;</span><br><span class="line">      return a.match(/\d/) - b.match(/\d/);</span><br><span class="line">   &#125;).join(&apos; &apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>直接一个正则表达式搞定。。。</p>
  `
}, {
  "id": 3,
  "date": +new Date('2018-3-14'),
  "visit": 100,
  "title": `codewars修行之旅2`,
  "cover": 'https://lixiaotiancai.github.io/images/firstBlogPic.jpg',
  "intro": 'codewars修行之旅2',
  "content": `<p>题目：<br>Bob is preparing to pass IQ test. The most frequent task in this test is to find out which one of the given numbers differs from the others. Bob observed that one number usually differs from the others in evenness. Help Bob — to check his answers, he needs a program that among the given numbers finds one that is different in evenness, and return a position of this number.</p>
<p>! Keep in mind that your task is to help Bob solve a real IQ test, which means indexes of the elements start from 1 (not 0)</p>
<p>eg：iqTest(“2 4 7 8 10”) =&gt; 3    iqTest(“1 2 1 1”) =&gt; 2</p>
<p>这道题的大概意思是找出一堆数字中不和谐的那个数并返回其位置,解决问题代码如下，结果黑盒测试却<br>各种过不了，最后才发现我以为这组数列必须是<b>等差数列</b>，不符合等差数列的数字就是错的，而题目要<br>求的实质就是让你找出一堆偶数中的奇数或者一堆奇数中的偶数。。。。。论审题的重要性</p>
<p>码了挺多也不容易，记录一下。。。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">function iqTest(numbers)&#123;</span><br><span class="line">  a = numbers.split(&quot; &quot;);</span><br><span class="line">  arr = [];</span><br><span class="line">  for(i=0; i&lt;a.length; i++)&#123;</span><br><span class="line">      arr.push(Number(a[i]))</span><br><span class="line">  &#125;;</span><br><span class="line">  if(arr.length&lt;=3)&#123;</span><br><span class="line">      if(arr[0]==arr[1])&#123;return 3&#125;;</span><br><span class="line">      if(arr[1]==arr[2])&#123;return 1&#125;;</span><br><span class="line">      if(arr[0]==arr[2])&#123;return 2&#125;;</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">      /*这里我的思路是先假设前两个数都是正确的，以前两个数的差值作为基准，依次推</span><br><span class="line">      算后面的数字，如果后面的数字推测有正确的，说明前两个数字正确，只要找到后面</span><br><span class="line">      没有对应上的数字位置即可。如果后面推测的数字没有一个对应上的，说明前两个数</span><br><span class="line">      字有个错的，那么最后两个数字一定是对的，那么就以最后两个数字作为基准，校验</span><br><span class="line">      前面的数字即可。*/</span><br><span class="line">      var dif = arr[1] - arr[0];</span><br><span class="line">      for(i=2; i&lt;arr.length; i++)&#123;</span><br><span class="line">          if((arr[0] + dif*i) == arr[i])&#123;</span><br><span class="line">              for(j=2; j&lt;arr.length; j++)&#123;</span><br><span class="line">                  if((arr[0] + dif*j) != arr[j])&#123;</span><br><span class="line">                      return j+1;</span><br><span class="line">                  &#125;;</span><br><span class="line">              &#125;;   </span><br><span class="line">          &#125;else&#123;</span><br><span class="line">              dif = arr[arr.length-1]-arr[arr.length-2];</span><br><span class="line">              for(i=2; i&lt;=arr.length; i++)&#123;</span><br><span class="line">                  if((arr[arr.length-1] - dif*i) != arr[arr.length-1-i])&#123;</span><br><span class="line">                      return arr.length-i;</span><br><span class="line">                  &#125;;</span><br><span class="line">              &#125;;</span><br><span class="line">          &#125;;</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>`
}, {
  "id": 4,
  "date": +new Date('2018-3-15'),
  "visit": 100,
  "title": `codewars修行之旅3`,
  "cover": 'https://lixiaotiancai.github.io/images/firstBlogPic.jpg',
  "intro": 'codewars修行之旅3',
  "content": `
  <p><strong><h2>本文的重点是是关于JS的BigInteger的加法运算</h2></strong></p>
<p>今天在codewars上刷到一道题，题目大概是实现两个字符串数字相加，最后返回一个数字字符串</p>
<p>eg： sumString(“123”,”456”)  =&gt; “579”</p>
<p>我不以为然的直接<code>return (parseInt(a)+parseInt(b)).toString()</code>结果显而易见，黑盒测试报错了<br>一片。错误原因是因为精度不准。</p>
<p>这是由于js自身进度问题所导致的，js在数字超过17位时，就不行了。在控制台打出123456789012345678</p>
<p>按下回车，他会返回一个123456789012345680，数字再大就会返回类似1.2345678901234568e+21的值。</p>
<p>也就是说在运算大型数字时，普通的加减乘除是不行了，那么我们应该怎么处理呢。</p>
<p>其实思路就是和小学学过的竖式差不多，把列竖式的过程用代码写出来，就可以了。</p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function sumStrings(a, b) &#123;</span><br><span class="line">  var res = &apos;&apos;, c = 0;</span><br><span class="line">  a = a.split(&apos;&apos;);</span><br><span class="line">  b = b.split(&apos;&apos;);</span><br><span class="line">  while (a.length || b.length || c) &#123;</span><br><span class="line">    c += ~~a.pop() + ~~b.pop();</span><br><span class="line">    res = c % 10 + res;</span><br><span class="line">    c = c &gt; 9;</span><br><span class="line">  &#125;</span><br><span class="line">  return res.replace(/^0+/, &apos;&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>变量res用于记录各位的数字，而c是用于记录是否存在进位。</p>
<p>开始先对字符串a，b做了一个split()操作，目的是为了把字符串打散成一个存着当个字符的Array()数组<br>便于我们之后的pop()操作。</p>
<p>while循环判定条件，只要a的长度或者b长度或者c不为0，循环就可以继续进行。</p>
<p>接下来见到了一个较为陌生的运算符 ~~ </p>
<p>~~是一种利用符号进行的类型转换,转换成数字类型</p>
<p>效果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~~true == 1</span><br><span class="line">~~false == 0</span><br><span class="line">~~&quot;&quot; == 0</span><br><span class="line">~~[] == 0</span><br><span class="line"></span><br><span class="line">~~undefined ==0</span><br><span class="line">~~!undefined == 1</span><br><span class="line">~~null == 0</span><br><span class="line">~~!null == 1</span><br></pre></td></tr></table></figure>
<p><code>这个运算符应用于本题就十分的方便，首先，当a[]pop空了，而b[]还没有pop空时，~~a[]可以直接返回0
省去了我们开始还要比较a,b的长度，长度短的前段补0的烦恼。其次，当c为True时，~~c直接返回1，从
而可以达到进位的目的。</code></p>
<p>其他就没有什么好说的了。</p>
<p>本题主要收获两点：1.Js的大整数进度运算问题。2.~~运算符。</p>`
}, {
  "id": 5,
  "date": +new Date('2018-3-16'),
  "visit": 120,
  "title": `codewars修行之旅3.1`,
  "cover": 'https://lixiaotiancai.github.io/images/firstBlogPic.jpg',
  "intro": 'codewars修行之旅3.1',
  "content": `
  <p>之所以叫3.1是因为本文为3的进阶版。</p>
<p>在codewars修行之旅3中，我学会了制作加法器来计算大整数相加，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function sumStrings(a,b)&#123;</span><br><span class="line">    var res=&apos;&apos;, c=0;</span><br><span class="line">    a = a.split(&apos;&apos;);</span><br><span class="line">    b = b.split(&apos;&apos;);</span><br><span class="line">    while (a.length || b.length || c)&#123;</span><br><span class="line">        c += ~~a.pop() + ~~b.pop();</span><br><span class="line">        res = c % 10 + res;</span><br><span class="line">        c = c&gt;9;</span><br><span class="line">    &#125;</span><br><span class="line">    return res.replace(/^0+/,&apos;&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那既然能制作加法器实现大整数相加而不损失精度，那能不能制作一个乘法器来计算大整数相乘呢？<br>答案是肯定的，因为乘法的本质其实也是加法，只要稍加转换，在加法器的基础上添油加醋，我们<br>就可以实现一个乘法器。</p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">function sumStrings(a, b) &#123;</span><br><span class="line">  var res = &apos;&apos;, c = 0;</span><br><span class="line">  a = a.split(&apos;&apos;);</span><br><span class="line">  b = b.split(&apos;&apos;);</span><br><span class="line">  while (a.length || b.length || c) &#123;</span><br><span class="line">    c += ~~a.pop() + ~~b.pop();</span><br><span class="line">    res = c % 10 + res;</span><br><span class="line">    c = c &gt; 9;</span><br><span class="line">  &#125;</span><br><span class="line">  return res;</span><br><span class="line">&#125;;</span><br><span class="line">function multiply(a, b)&#123;</span><br><span class="line">    var a = a.split(&quot;&quot;);</span><br><span class="line">    var b = b.split(&quot;&quot;);</span><br><span class="line">    var c = 0;      //进位</span><br><span class="line">    var lena = a.length;</span><br><span class="line">    var lenb = b.length;</span><br><span class="line">    var mulate = 0;</span><br><span class="line">    var addString = [];</span><br><span class="line">    var output = &apos;&apos;;</span><br><span class="line">    for(i=0;i&lt;lena;i++)&#123;addString[i] = new Array(lenb-1)&#125;;</span><br><span class="line">    for(i=lena-1; i&gt;=0; i--)&#123;</span><br><span class="line">        c = 0;</span><br><span class="line">        for(j=lenb-1; j&gt;=0; j--)&#123;</span><br><span class="line">            mulate = parseInt(a[i]) * parseInt(b[j]) + c;</span><br><span class="line">            mulate.toString().length==1 ? c=0 : c=Number(mulate.toString()[0]);</span><br><span class="line">            if(j==0)&#123;addString[i].unshift(mulate);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">            addString[i].unshift(mulate%10);&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        addString[i] = addString[i].join(&quot;&quot;);</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    for(i=0; i&lt;addString.length; i++)&#123;</span><br><span class="line">        for(j=addString.length-1; j&gt;i; j--)&#123;</span><br><span class="line">            addString[i] = addString[i].toString()+&quot;0&quot;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    for(i=0; i&lt;addString.length; i++)&#123;</span><br><span class="line">        output = sumStrings(output.toString(), addString[i].toString());</span><br><span class="line">    &#125;;</span><br><span class="line">    if(parseInt(output) == 0)&#123;return &quot;0&quot;;&#125;;</span><br><span class="line">    return output.replace(/^0+/, &apos;&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>来检测一下，我们调用<code>multiply()</code>函数。<br>multiply(“123243453545644”, “98765434567896”)<br>很正确的得到了结果”12172193247083832764253045024”。丝毫没有损失精度。</p>
<p>我的思路就是把列竖式算乘法的过程转化成代码。先把题目化简成1位数 * 多位数，这个不难实现，<br>用进位法就可以了。然后题目就变成了多个大整数相加，就可以直接套用已经设计好的加法器了，<br>这期间要注意的是补”0”。</p>
<p>接下来我们来挑战更高的难度，我们引入了小数点和正负号的计算。</p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">var back = 0;</span><br><span class="line">var backa = 0;</span><br><span class="line">var bakckb = 0;</span><br><span class="line">function changeNum(n)&#123;</span><br><span class="line">    back = 0;</span><br><span class="line">    if(n.indexOf(&quot;-&quot;)!=-1)&#123;n = n.replace(&quot;-&quot;,&quot;&quot;);&#125;;</span><br><span class="line">    if(n.indexOf(&quot;.&quot;)!=-1)&#123;</span><br><span class="line">        back = n.length - n.indexOf(&quot;.&quot;) - 1;</span><br><span class="line">        n = n.replace(&quot;.&quot;,&quot;&quot;);</span><br><span class="line">    &#125;;</span><br><span class="line">    return n;</span><br><span class="line">&#125;;</span><br><span class="line">function sumStrings(a, b) &#123;</span><br><span class="line">  var res = &apos;&apos;, c = 0;</span><br><span class="line">  a = a.split(&apos;&apos;);</span><br><span class="line">  b = b.split(&apos;&apos;);</span><br><span class="line">  while (a.length || b.length || c) &#123;</span><br><span class="line">    c += ~~a.pop() + ~~b.pop();</span><br><span class="line">    res = c % 10 + res;</span><br><span class="line">    c = c &gt; 9;</span><br><span class="line">  &#125;</span><br><span class="line">  return res;</span><br><span class="line">&#125;;</span><br><span class="line">function multiply(a, b)&#123;</span><br><span class="line">    var a1 = a;</span><br><span class="line">    var b1 = b;</span><br><span class="line">    var a = changeNum(a).split(&quot;&quot;);</span><br><span class="line">    var b = changeNum(b).split(&quot;&quot;);</span><br><span class="line">    var c = 0;      //进位</span><br><span class="line">    var lena = a.length;</span><br><span class="line">    var lenb = b.length;</span><br><span class="line">    var mulate = 0;</span><br><span class="line">    var addString = [];</span><br><span class="line">    var output = &apos;&apos;;</span><br><span class="line">    for(i=0;i&lt;lena;i++)&#123;addString[i] = new Array(lenb-1)&#125;;</span><br><span class="line">    for(i=lena-1; i&gt;=0; i--)&#123;</span><br><span class="line">        c = 0;</span><br><span class="line">        for(j=lenb-1; j&gt;=0; j--)&#123;</span><br><span class="line">            mulate = parseInt(a[i]) * parseInt(b[j]) + c;</span><br><span class="line">            mulate.toString().length==1 ? c=0 : c=Number(mulate.toString()[0]);</span><br><span class="line">            if(j==0)&#123;addString[i].unshift(mulate);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">            addString[i].unshift(mulate%10);&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        addString[i] = addString[i].join(&quot;&quot;);</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    for(i=0; i&lt;addString.length; i++)&#123;</span><br><span class="line">        for(j=addString.length-1; j&gt;i; j--)&#123;</span><br><span class="line">            addString[i] = addString[i].toString()+&quot;0&quot;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    for(i=0; i&lt;addString.length; i++)&#123;</span><br><span class="line">        output = sumStrings(output.toString(), addString[i].toString());</span><br><span class="line">    &#125;;</span><br><span class="line">    if(parseInt(output) == 0)&#123;return &quot;0&quot;;&#125;;</span><br><span class="line">    output = output.replace(/^0+/, &apos;&apos;);</span><br><span class="line">    changeNum(a1);</span><br><span class="line">    backa = back;</span><br><span class="line">    changeNum(b1);</span><br><span class="line">    backb = back;</span><br><span class="line">    back = backa + backb;</span><br><span class="line">    if(back!=0)&#123;</span><br><span class="line">        if(back&gt;=output.length)&#123;</span><br><span class="line">            var lenOutput = output.length;</span><br><span class="line">            for(i=0;i&lt;=back-lenOutput;i++)&#123;</span><br><span class="line">                output = &quot;0&quot; + output;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        output = output.substring(0,output.length-back) + &quot;.&quot; + output.substring(output.length-back);</span><br><span class="line">    &#125;;</span><br><span class="line">    if(output.indexOf(&quot;.&quot;)!=-1)&#123;</span><br><span class="line">        var delCount = 0;</span><br><span class="line">        i = output.length - 1;</span><br><span class="line">        while(output[i]==&quot;0&quot; &amp;&amp; output[i]!=&quot;.&quot;)&#123;</span><br><span class="line">            delCount++;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;;</span><br><span class="line">        output = output.substring(0,output.length - delCount);</span><br><span class="line">        if(output[output.length-1]==&quot;.&quot;)&#123;</span><br><span class="line">            output = output.substring(0,output.length-1);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    if((a1[0]==&quot;-&quot;&amp;&amp;b1[0]!=&quot;-&quot;) || (a1[0]!=&quot;-&quot;&amp;&amp;b1[0]==&quot;-&quot;))&#123;</span><br><span class="line">        output = &quot;-&quot; + output;</span><br><span class="line">    &#125;;</span><br><span class="line">    return output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我的思路是先去除小数点和正负号，把问题转化成我们刚做好的乘法器，最后在处理小数点的移位问题<br>和结果正负的问题。</p>
<p>我们来测试一下</p>
<p>multiply(“-3212131.75567575675”, “98765456.32657657657567665”)</p>
<p>得到”-317247658630403.6958374344540899261320548875”</p>
<p>十分完美。</p>
<p>不过问题是代码仍旧比较累赘，有些地方的处理过于繁琐，待优化空间很大。</p>`
}, {
  "id": 6,
  "date": +new Date('2018-3-17'),
  "visit": 100,
  "title": `js经典题目解析`,
  "cover": 'https://lixiaotiancai.github.io/images/firstBlogPic.jpg',
  "intro": 'js经典题目解析',
  "content": `  <h2>本文重点：let，var与作用域</h2>

<p>今天看到了一道不错的题目：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a = [];</span><br><span class="line">for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">  a[i] = function () &#123;</span><br><span class="line">    console.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[6](); // 10</span><br></pre></td></tr></table></figure>
<p>乍一看a<a href="">6</a>怎么都应该输出6才对啊，怎么会输出10呢。</p>
<p>我看了网上很多的解释，以下这段摘自阮一峰老师：</p>
<p>“上面代码中，变量i是var命令声明的，在全局范围内都有效，所以全局只有一个变量i。每一次<br>循环，变量i的值都会发生改变，而循环内被赋给数组a的函数内部的console.log(i)，里面的i指<br>向的就是全局的i。也就是说，所有数组a的成员里面的i，指向的都是同一个i，导致运行时输出的<br>是最后一轮的i的值，也就是 10。”</p>
<p>我觉得阮一峰老师已经解释的很清楚了，但还是有些抽象，我用我自己的理解来谈一谈：</p>
<p>我们看看每次的循环体内部到底是什么样子，这样比较形象：</p>
<p>循环第一次：a[0] = function(){console.log(i)};这里可能会说，为什么不是console.log(1)呢？<br>这是因为在循环体中，函数未被调用，此时在编译时系统根本就不知道你function里面是什么，那么<br>这样表述就更为生动：a[0] = function(){狗};</p>
<p>循环第二次：a[1] = function(){狗};</p>
<p>…</p>
<p>循环第十次：a[9] = function(){狗};</p>
<p>好了循环结束，终于到调用函数的时候了，在执行a<a href="">6</a>的时候，系统就会去找这个函数到底是什么，<br>于是系统找到了在循环体中定义的a[6] = function(){console.log(i)};此时此刻系统要执行console.log<br>这个函数了,要对i进行赋值，但是全局变量i经过在循环体中的数次循环已经等于10，于是就会输出了<br>神奇的10。</p>
<p>那么有没有办法让a[]正常输出0~9呢，答案是肯定的。我们只要知道了是什么导致了上题的结果就可以了。<br>上题之所以所有的a[]都会输出10是因为i是全局变量导致的，这也是ES5所诟病的一点，这会在无意中导致<br>bug的,假如我们能在每一次循环中声明一个新的变量，就可以解决问题。</p>
<p>ECMA也意识到了这一点，于是ES6横空出世，在新的ES6准则中，引入了全新的块级作用域声明字符<code>let</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a = [];</span><br><span class="line">for (let i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">  a[i] = function () &#123;</span><br><span class="line">    console.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[6](); // 6</span><br></pre></td></tr></table></figure>
<p>当var换成了let后，a[6]输出了我们想要的结果，这又是为什么。还是来看每次的循环体：</p>
<p>循环第一次：a[i] = function(){console.log(i)};  //i = 0</p>
<p>循环第二次：a[i] = function(){console.log(i)};  //i = 1<br>不过此时此刻要注意一点，此i已经不是当年的那个i了，由于let是块级作用域，第一个i的生命到第一次<br>循环结束就结束了，循环第二次的i是一个全新的i。虽然同名同姓，却是不同的人。为了形象，我们给<br>第二次循环的i改个名字，叫“i2”。<br>那么第二次循环就变成了a[i2] = function(){console.log(i2)};</p>
<p>…</p>
<p>第十次循环：a[i10] = functino(){console.log(i10)};</p>
<p>在执行a<a href="">6</a>的时候，系统会找到a<a href="">6</a>定义的function，是a[i6] = function(){console.log(i6)};<br>由于i6这个变量是独一无二的，所以理应得到了结果6。</p>
<p>大致原理就可以这么理解，此时再引用阮一峰老师的一段话：</p>
<p>“上面代码中，变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新<br>的变量，所以最后输出的是6。你可能会问，如果每一轮循环的变量i都是重新声明的，那它怎么知道<br>上一轮循环的值，从而计算出本轮循环的值？这是因为 JavaScript 引擎内部会记住上一轮循环的值，<br>初始化本轮的变量i时，就在上一轮循环的基础上进行计算。”</p>
<p>另外此题可以更直观的表示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(var i = 0 ; i &lt; 10 ; i ++)&#123;</span><br><span class="line">    </span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">console.log(i)&#125;,1000*i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此代码会依次输出10次10</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(let i = 0 ; i &lt; 10 ; i ++)&#123;</span><br><span class="line">    </span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">console.log(i)&#125;,1000*i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此代码会依次输出1到9</p>`
}, {
  "id": 7,
  "date": +new Date('2018-3-18'),
  "visit": 100,
  "title": `用原生js写排序`,
  "cover": 'https://lixiaotiancai.github.io/images/firstBlogPic.jpg',
  "intro": '用原生js写排序',
  "content": `
  <h2>插入排序</h2>

<p><img src="https://lixiaotiancai.github.io/images/selectionSort.gif" alt="插入图片"></p>
<p>时间复杂度O(n^2)，不适合数据量大的排序，在数据量较小时比较好用。</p>
<p>代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function sort(arr) &#123;</span><br><span class="line">  if(arr.length &lt;= 1) &#123;</span><br><span class="line">    return arr;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"> for(i=1;i&lt;arr.length;i++)&#123;</span><br><span class="line">     for(j=i;j&gt;=0;j--)&#123;</span><br><span class="line">       if(arr[j]&lt;arr[j-1])&#123;</span><br><span class="line">        var t = arr[j];</span><br><span class="line">         arr[j] = arr[j-1];</span><br><span class="line">        arr[j-1] = t;</span><br><span class="line">     &#125;;</span><br><span class="line">     &#125;;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line">  return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2>冒泡排序</h2>

<p><img src="https://lixiaotiancai.github.io/images/bubbleSort.gif" alt="插入图片"></p>
<p>时间复杂度O(n^2)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function sort(arr) &#123;</span><br><span class="line">  if(arr.length &lt;= 1) &#123;</span><br><span class="line">    return arr</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">for(i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">    for(j=0;j&lt;arr.length-i;j++)&#123;</span><br><span class="line">      if(arr[j+1]&lt;arr[j])&#123;</span><br><span class="line">        var t = arr[j];</span><br><span class="line">     arr[j] = arr[j+1];</span><br><span class="line">      arr[j+1] = t;</span><br><span class="line">   &#125;;</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">  return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2>选择排序</h2>

<p><img src="https://lixiaotiancai.github.io/images/insertionSort.gif" alt="插入图片"></p>
<p>交换次数少，空间复杂度较低</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function selectionSort(arr) &#123;</span><br><span class="line">    if(arr.length &lt;= 1) &#123;</span><br><span class="line">        return arr</span><br><span class="line">    &#125;</span><br><span class="line">    for (i = 0; i &lt; arr.length - 1; i++) &#123;</span><br><span class="line">        min = i;</span><br><span class="line">        for (j = i + 1; j &lt; arr.length; j++) &#123;</span><br><span class="line">            if (arr[min] &gt; arr[j])</span><br><span class="line">                min = j;</span><br><span class="line">                t = arr[min];</span><br><span class="line">                arr[min] = arr[i];</span><br><span class="line">                arr[i] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2>快速排序</h2>

<p><img src="https://lixiaotiancai.github.io/images/quickSort.gif" alt="插入图片"></p>
<p>快速排序应该是比较重要的了,时间复杂度仅为O(NlogN)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function quickSort(arr) &#123;</span><br><span class="line">  if (arr.length &lt;= 1) &#123;</span><br><span class="line">    return arr.slice(0);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var left = [];</span><br><span class="line">  var right = [];</span><br><span class="line">  var mid = [arr[0]]; //选择第一个元素为中枢</span><br><span class="line"></span><br><span class="line">  for (var i = 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">    if (arr[i] &lt; mid[0]) &#123;</span><br><span class="line">      left.push(arr[i]);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      right.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">   console.log(left,mid,right);</span><br><span class="line">  &#125;</span><br><span class="line">  return quickSort(left).concat(mid.concat(quickSort(right)));</span><br><span class="line">&#125;</span><br><span class="line"> quickSort([6,3,1,3,2,8,5,6,7.5,7]);</span><br></pre></td></tr></table></figure>
<p>在控制台中输出上述代码，结果如下：</p>
<p><img src="https://lixiaotiancai.github.io/images/output.png" alt="插入图片"></p>`
}, {
  "id": 8,
  "date": +new Date('2018-3-26'),
  "visit": 100,
  "title": `虐心的js原型`,
  "cover": 'https://lixiaotiancai.github.io/images/firstBlogPic.jpg',
  "intro": '虐心的js原型',
  "content": `
        <p>这个应该是js中比较核心的知识了，如果能把这块知识彻底的搞懂，我觉得js基本通关一半了。</p>
<p>首先要区分这3个概念，什么是原型，什么是原型链，什么又是继承：</p>
<p>原型：官方定义：原型是函数的一个属性，是一个对象。不过我觉得这样的定义虽然准确却过于笼统，在我看来，原型是一个<br>包含着所有可被继承的方法和属性的对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var Person = function()&#123;</span><br><span class="line">    this.name = &quot;lixiao&quot;;</span><br><span class="line">&#125;</span><br><span class="line">person.prototype.sayHello = function()&#123;return this.name + &quot;hello!&quot;&#125;;</span><br></pre></td></tr></table></figure></p>
<p>这样我们就定义了一个Person函数，当我们在控制台打出console.log(Person.prototype)时，控制台会输出一个一个Object对象<br>里面有我们定义好的name属性，sayHello()方法和一个constructor属性，constructor是函数的构造属性，他是每个函数的原型<br>中都有的属性，这个属性（是一个指针）指向 prototype 属性所在的函数。即，Person.prototype.constructor === Person会<br>返回true。那么这个object对象就是Person的原型了。</p>
<p>顺带一提Person的实例的constructor属性也会返回Person，说白了就是你是哪个函数造出来的，你的constructor就会返回哪个<br>函数。之所以Person的实例和Person.prototype都会有constructor属性而且都会返回Person，其实也是因为Person的原型和<br>Person的实例都是Person的实例。</p>
<p>那么原型链又是什么呢？在js构造对象时，都会有一个叫<strong>proto</strong>的属性，他指向的是构造函数的原型。<br>比如我们现在new了一个Person实例：</p>
<p>var lixiao = new Person();</p>
<p>那么lixiao这个变量的<strong>proto</strong>指向的是谁呢。指向的是lixiao的构造函数的原型。lixiao是Person的一个实例，那么<br>lixiao.constructor === Person，而Person的原型呢？Person.prototype。因此:</p>
<p>lixiao.<strong>proto</strong> === Person.prototype   //true</p>
<p>我们将连接在实例与构造函数的原型间的这段链接  称为<br>原型链<br></p>
<p>最后就剩继承了。继承可以使子类拥有父类的属性和方法。例如上面的例子，lixiao作为Person的一个实例化对象，也可以称作为<br>Person的子类。Person拥有自己的name属性，和原型上的sayHello()方法，这也就意味着，lixiao这个对象将继承Person全部的<br>属性和方法以及原型上的对象和方法。因此lixiao.sayHello()会返回 lixiaohello! 。this指向的是Person。继承总共有3种<br>方法，分别是prototype   call+prototype  和 apply。本文只介绍prototype方法，call和apply会专门另开一篇文章讲。</p>`
}, {
  "id": 9,
  "date": +new Date('2018-3-27'),
  "visit": 130,
  "title": `Next训练营Day1`,
  "cover": 'https://lixiaotiancai.github.io/images/firstBlogPic.jpg',
  "intro": 'Next训练营Day1',
  "content": `
    <p>今天直播课主要是简单介绍了一下node的知识。</p>
<p>初始化一个项目，首先<code>npm init</code>初始化生成一个package.json，也就是配置文件。</p>
<p>打开package.json,里面是一个对象：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;day1&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;hello world!&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;helloworld.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;li xiao&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;chalk&quot;: &quot;^2.3.2&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就拿上面的配置文件举例，从上自下依次是：项目名称，项目版本，项目描述，项目的入口程序，项目作者，项目许可证和<br>项目依赖包。</p>
<p>那么现在看主程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var chalk = require(&apos;chalk&apos;);</span><br><span class="line">var helloWorld = &quot;Hello World!!!&quot;;</span><br><span class="line">var color = [&quot;#FFD700&quot;,&quot;#FF3030&quot;,&quot;#EE00EE&quot;,&quot;#EE0000&quot;,&quot;#00E5EE&quot;,&quot;#00FFFF&quot;,&quot;#CDAD00&quot;,&quot;#8DEEEE&quot;,&quot;#00E5EE&quot;,&quot;#EEEE00&quot;,&quot;#EE0000&quot;,&quot;#00E5EE&quot;,&quot;#EE0000&quot;,&quot;#CDAD00&quot;];</span><br><span class="line">var output = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">var chooseColor = function()&#123;</span><br><span class="line"> for(var i=0;i&lt;helloWorld.length;i++)&#123;</span><br><span class="line">        output += chalk.hex(color[i]).bold(helloWorld[i]);</span><br><span class="line"> &#125;;</span><br><span class="line"> return output;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(chooseColor());</span><br></pre></td></tr></table></figure>
<p>chalk是一个可以美化命令行的npm包。</p>
<p>在当前目录打开cmd输入<code>node helloworld</code>,就可以看到五颜六色的Hello World！！！了~~</p>
<p>基础课是简单介绍了一下js的几种基本数据类型。</p>
<p>js的基本数据类型分别是Undefined，Null，Boolean，Number，String和Object，以及Symbols（ES6）。</p>
<p>这里着重讲一下Undefined和Null，这里老师讲的已经形象了。</p>
<p><code>var bag = null</code> 我有个袋子，里面没装东西。<br><code>var something / var something = undefined</code> 我有个东西但不知道是什么。</p>
<p>数据类型    Null    Undefined</p>
<p>取值        null    undefined</p>
<p>含义     数据为空   变量已声明但未初始化</p>
<p>例子   var a = null   var a       </p>
<p>typeof    object     undefined</p>
<p>boolean   false        false</p>
<p>至于为什么 typeof(null) === “object” 为true，这个问题是由于js的历史遗留问题造成的。<br>对此官方解释如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在 JavaScript 最初的实现中，JavaScript 中的值是由一个表示类型的标签和实际数据值表示的。</span><br><span class="line">对象的类型标签是 0。由于 null 代表的是空指针（大多数平台下值为 0x00），因此，null的类型</span><br><span class="line">标签也成为了 0，typeof null就错误的返回了&quot;object&quot;。</span><br></pre></td></tr></table></figure></p>
<p>ECMA也曾提案过要把typeof(null)修正为null，但是失败了。。。。</p>
<p>我们再来看看关于undefined和null的那些等式关系：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">null == null                   //true</span><br><span class="line">null == false / null ===false  //false</span><br><span class="line">null ==0 / nul===0             //false  null在设计上，在此处不尝试转型. 所以 结果为false.</span><br><span class="line">null&gt;0 / null&lt;0                //false  null 尝试转型为number , 则为0 . 所以结果为 false.</span><br><span class="line">null&gt;=0 / null&lt;=0              //true   null 尝试转为number ,则为0 , 结果为 true.</span><br><span class="line">null == undefined              //true</span><br><span class="line">null === undefined             //false</span><br><span class="line">null ==/===  &apos;&apos;/&#123;&#125;/[]          //false</span><br><span class="line"></span><br><span class="line">undefined == undefined         //true</span><br><span class="line">undefined == true/false        //false</span><br><span class="line">undefined == &apos;&apos;/[]/&#123;&#125;          //false</span><br><span class="line">undefined和0的任何比较         //false</span><br></pre></td></tr></table></figure>
<p>对undefined和null的判断我们可以这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(typeof(value)==&quot;undefined&quot;)&#123; </span><br><span class="line">    console.log(&quot;undefined&quot;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(value === null)&#123;</span><br><span class="line">    console.log(&quot;null&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>`
}, {
  "id": 10,
  "date": +new Date('2018-3-29'),
  "visit": 100,
  "title": `nodejs+ajax请求练习`,
  "cover": 'https://lixiaotiancai.github.io/images/firstBlogPic.jpg',
  "intro": 'nodejs+ajax请求练习',
  "content": `
  <p>今天练习了一下ajax请求，自己用nodejs打了一个服务器。</p>
<p>需要注意的点是需要先<code>npm install http-server</code>，因为你的http需要运行在服务器环境里</p>
<p>http代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;</span><br><span class="line">    &lt;title&gt;ajax demo&lt;/title&gt;</span><br><span class="line">    &lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;keywords&quot; content=&quot;&quot;&gt;</span><br><span class="line">    &lt;link href=&quot;&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;点击一下&quot; onclick=&quot;GetData()&quot; /&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;</span><br><span class="line">    this is a  ajax demo</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function GetData()&#123;</span><br><span class="line">        var xhr=new XMLHttpRequest();</span><br><span class="line">        xhr.open(&quot;GET&quot;,&quot;http://localhost:8888&quot;,true);</span><br><span class="line">        xhr.onreadystatechange=function()&#123;</span><br><span class="line">            if(xhr.readyState==4)&#123;</span><br><span class="line">                if(xhr.status==200)&#123;</span><br><span class="line">            document.getElementById(&quot;test&quot;).innerHTML=xhr.responseText;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.send();</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>nodejs代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var http=require(&quot;http&quot;);</span><br><span class="line"></span><br><span class="line">var server=http.createServer(function(req,res)&#123;</span><br><span class="line"></span><br><span class="line">    if(req.url!==&quot;/favicon.ico&quot;)&#123;</span><br><span class="line"></span><br><span class="line">        res.writeHead(200,&#123;&quot;Content-Type&quot;:&quot;text/plain&quot;,&quot;Access-Control-Allow-Origin&quot;:&quot;http://localhost:8080&quot;&#125;);</span><br><span class="line"></span><br><span class="line">        res.write(&quot;hello,我是从服务器端接收的&quot;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.end();</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(8888,&quot;localhost&quot;,function()&#123;</span><br><span class="line"></span><br><span class="line">    console.log(&quot;开始监听...&quot;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>`
}, {
  "id": 11,
  "date": +new Date('2018-3-14'),
  "visit": 100,
  "title": `进阶的继承`,
  "cover": 'https://lixiaotiancai.github.io/images/firstBlogPic.jpg',
  "intro": '进阶的继承',
  "content": `
   <p>今天来谈谈继承的几种形式吧。</p>
<h4>1.原型链继承</h4>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var Person = function(name)&#123;</span><br><span class="line">    this.name = name || &quot;noName&quot;;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getName = function()&#123;</span><br><span class="line">    return '
  我的名字是：' $ & #123;this.name&# 125;
  ;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">var Student = function(name)&#123;</span><br><span class="line">    this.grade = 1;</span><br><span class="line">    this.name = name</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype = new Person();</span><br><span class="line">Student.prototype.getGrade = function()&#123;</span><br><span class="line">    return this.grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var lixiao = new Student(&quot;lixiao&quot;);</span><br><span class="line"></span><br><span class="line">console.log(lixiao.name);    //lixiao</span><br><span class="line">console.log(lixiao.getName());    //我的名字是： 李骁  </span><br><span class="line">console.log(lixiao.getGrade());    //1</span><br><span class="line">console.log(lixiao instanceof Student);   //true</span><br><span class="line">console.log(lixiao instanceof Person);    //true</span><br><span class="line">console.log(lixiao.__proto__ === Student.prototype);   //true</span><br><span class="line">console.log(lixiao.__proto__.__proto__ === Person.prototype);   //true</span><br></pre></td></tr></table></figure>`
}, {
  "id": 12,
  "date": +new Date('2018-4-3'),
  "visit": 130,
  "title": `Next训练营Day2`,
  "cover": 'https://lixiaotiancai.github.io/images/firstBlogPic.jpg',
  "intro": 'Next训练营Day2',
  "content": `
  <p>今天的基础课讲的都很基础，主要讲了条件语句和循环语句。讲的都十分基础，所以这里就不必啰嗦。</p>
<p>补充一些老师没有讲到的内容吧：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">var People = function(props)&#123;</span><br><span class="line">    this.name = props.name || &quot;noName&quot;;</span><br><span class="line">&#125;</span><br><span class="line">People.prototype.getName = function()&#123;</span><br><span class="line">    return '我的名字是 $&#123;this.name&#125;'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var Student = function(props)&#123;</span><br><span class="line">    People.call(this,props);</span><br><span class="line">    this.grade = props.grade || &quot;noGrade&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function inherits(child,parent)&#123;</span><br><span class="line">    var F = function()&#123;&#125;;</span><br><span class="line">    F.prototype = parent.prototype;</span><br><span class="line">    child.prototype = new F();</span><br><span class="line">    child.prototype.constructor = child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inherits(Student,People);</span><br><span class="line"></span><br><span class="line">Student.prototype.getGrade = function()&#123;</span><br><span class="line">    return 'my grade is $&#123;this.grade&#125;'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function createStudent(props)&#123;</span><br><span class="line">    return new Student(props||&#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var lixiao = createStudent(&#123;</span><br><span class="line">    name: &quot;lixiao&quot;,</span><br><span class="line">    grade: 1,</span><br><span class="line">    age: 23</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">for(var key in lixiao)&#123;</span><br><span class="line">    console.log(key);   //name,grade,constructor,getGrade,getName  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果我们想过滤掉继承的属性，可以这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">var People = function(props)&#123;</span><br><span class="line">    this.name = props.name || &quot;noName&quot;;</span><br><span class="line">&#125;</span><br><span class="line">People.prototype.getName = function()&#123;</span><br><span class="line">    return '我的名字是 $&#123;this.name&#125;'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var Student = function(props)&#123;</span><br><span class="line">    People.call(this,props);</span><br><span class="line">    this.grade = props.grade || &quot;noGrade&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function inherits(child,parent)&#123;</span><br><span class="line">    var F = function()&#123;&#125;;</span><br><span class="line">    F.prototype = parent.prototype;</span><br><span class="line">    child.prototype = new F();</span><br><span class="line">    child.prototype.constructor = child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inherits(Student,People);</span><br><span class="line"></span><br><span class="line">Student.prototype.getGrade = function()&#123;</span><br><span class="line">    return 'my grade is $&#123;this.grade&#125;'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function createStudent(props)&#123;</span><br><span class="line">    return new Student(props||&#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var lixiao = createStudent(&#123;</span><br><span class="line">    name: &quot;lixiao&quot;,</span><br><span class="line">    grade: 1,</span><br><span class="line">    age: 23</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">for(var key in lixiao)&#123;</span><br><span class="line">    if(lixiao.hasOwnProperty(key))&#123;</span><br><span class="line">        console.log(key);   //name,grade</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可能有人想问age去哪里了，原因是age被过滤掉了，这样的写法好处是无需管输入参数的顺序，我们可以直接扔一个庞大的<br>对象比如json进去，他会自动过滤出我们想要的方法和属性。</p>
<p>for-in方法同样适用于数组。因为数组也是对象啊。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,4,5,6,7]</span><br><span class="line">for(var key in arr)&#123;</span><br><span class="line">    console.log(arr[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>像这样可以轻松的遍历数组。</p>
<p>不过这样有一个问题。如果我们给数组新增加了一个方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,4,5,6,7];</span><br><span class="line">arr.sayHello = function()&#123;console.log(&quot;hello&quot;)&#125;;</span><br><span class="line">for(var key in arr)&#123;</span><br><span class="line">    console.log(arr[key])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们只想遍历数组而他会把我们后来新增加的方法一起进行遍历。这时我们就要用ES6新引入的一种循环方式：for-of：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,4,5,6,7];</span><br><span class="line">arr.sayHello = function()&#123;console.log(&quot;hello&quot;)&#125;;</span><br><span class="line">for(var el of arr)&#123;</span><br><span class="line">    console.log(el);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然for-of同样可以遍历ES6的Map和Set~</p>`
}, {
  "id": 13,
  "date": +new Date('2018-4-4'),
  "visit": 100,
  "title": `Next训练营Day5`,
  "cover": 'https://lixiaotiancai.github.io/images/firstBlogPic.jpg',
  "intro": 'Next训练营Day5',
  "content": `
  <p>首先来对比一下工厂函数和构造函数，因为二者很像导致初学很容易弄混。</p>
<p>这是工厂函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function functionFactory(name,age)&#123;</span><br><span class="line">    var o = &#123;&#125;;</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age = age;</span><br><span class="line">    o.getName = function()&#123;</span><br><span class="line">        return 'my name is $&#123;this.name&#125;'</span><br><span class="line">    &#125;</span><br><span class="line">    return o;</span><br><span class="line">&#125;</span><br><span class="line">var xiaoming = functionFactory(&quot;xiaoming&quot;,13);</span><br><span class="line">console.log(xiaoming.getName());  //my name is xiaoming</span><br></pre></td></tr></table></figure></p>
<p>这是构造函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var functionConstructor = function(name,age)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">    this.getName = function()&#123;</span><br><span class="line">        return 'my name is $&#123;this.name&#125;'</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var xiaoming = new functionConstructor(&quot;xiaoming&quot;,13);</span><br><span class="line">console.log(xiaoming.getName());  //my name is xiaoming</span><br></pre></td></tr></table></figure></p>
<p>单看代码，工厂函数和构造函数的区别为：<br>1.构造函数没有显示的创建对象。<br>2.工厂函数是通过在内部声明一个空对象并赋予这个对象新的属性和方法来实现的。而构造函数则赋给了this。<br>3.构造函数有return，调用函数即可生成新对象，而构造函数没有return，必须用new生成新实例。</p>
<p>再看看两种函数都是如何返回对象的：<br>工厂函数就不必多说了，直接返回一个object。<br>构造函数则不同,在我们调用<code>var xiaoming = new functionConstructor(&quot;xiaoming&quot;,13)</code>时，内部发生了这些事：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var xiaoming = &#123;&#125;;</span><br><span class="line">xiaoming.__proto__ = functionConstructor.prototype; //</span><br><span class="line">functionCostructor.call(xiaoming);</span><br><span class="line">return xiaoming;</span><br></pre></td></tr></table></figure></p>
<p>在性能上来说，构造函数可能比工厂函数略快，而且构造函数的this指向创建的新对象，可以使用instanceof来检测<br>对象是否为构造函数的实例。不过在某些特定场景下instanceof具有欺骗性，需要注意。而且在构造函数重构为工厂函数<br>时会有一些问题，这里不去深究。相比之下工厂函数不用担心重构问题，工厂函数的this不会指向新的对象，但是反过来<br>说也可以说明工厂函数的this指向明确。对象与工厂间不存在继承的关系，无法使用instanceof证实该对象出自于工厂<br>但反过来也可以说明工厂函数不会被instanceof欺骗。</p>
<p>今天还讲到了一个arguments，他是一个类数组，可以拿到function里的参数，这里小扩展一下，要想以数组的形式拿到<br>function的参数，可以这样做：<br><code>[].slice.call(arguments)</code></p>`
}, {
  "id": 14,
  "date": +new Date('2018-4-9'),
  "visit": 100,
  "title": `js函数的重构`,
  "cover": 'https://lixiaotiancai.github.io/images/firstBlogPic.jpg',
  "intro": 'js函数的重构',
  "content": ` <p>今天来说说函数的重构吧。</p>
<p>首先说说什么是函数的重构，就是一个相同名字的函数但是会根据不同的需求从而调用不同的功能。</p>
<p>需求的不同可以根据参数的数量，或者是参数的类型来反映。</p>
<p>按理说，js的函数本身是不存在重构这种功能的，但我们可以通过一系列的操作来模拟出函数的重构。</p>
<p>最简单的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var num = function()&#123;</span><br><span class="line">    if(arguments.length === 0) &#123;console.log(&quot;this is method 0&quot;);&#125;</span><br><span class="line">    else if(arguments.length === 1)&#123;console.log(&quot;this is method 1&quot;)&#125;</span><br><span class="line">    else(console.log(&quot;this is method 2&quot;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">num();    //this is method 0</span><br><span class="line">num(1);   //this is method 1</span><br><span class="line">num(1,2); //this is menthod 2</span><br></pre></td></tr></table></figure>
<p>怎么样，同样是函数函数num(),我们用他定义了不同的功能，这就是函数的重构。</p>
<p>其实函数的重构往往发生于以下的场景，比如你发现这个项目的某函数已经不满足当前需求了，需要扩展功能，而这个函数已经被这个项目其他<br>模块调用了，如果重新定义该函数那么所有引用到该函数的模块都要重改，从而牵一发而动全身。对此我们需要函数的重构，在不影响以前的功能<br>的情况下增加新的功能。</p>
<p>那么除了上面例子中的代码外，我们有没有其他的重构函数的方法呢？答案是肯定的。</p>
<p>让我们来看看jQuery之父是怎么重构的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var num = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">function addMethod (obj,name,fn) &#123;</span><br><span class="line">    var ex = obj[name];</span><br><span class="line">    obj[name] = function()&#123;</span><br><span class="line">        if(arguments.length === fn.length)&#123;</span><br><span class="line">            return fn.apply(this,arguments);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(typeof ex === &quot;function&quot;)&#123;</span><br><span class="line">            return ex.apply(this,arguments);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addMethod(num,&quot;method&quot;,function()&#123;console.log(&quot;this is method 0&quot;);&#125;);</span><br><span class="line">addMethod(num,&quot;method&quot;,function(a)&#123;console.log(&quot;this is method 1&quot;);&#125;);</span><br><span class="line">addMethod(num,&quot;method&quot;,function(a,b)&#123;console.log(&quot;this is method 2&quot;);&#125;);</span><br><span class="line"></span><br><span class="line">num.method();   // this is method 0</span><br></pre></td></tr></table></figure>
<p>看完之后还是要感慨一下毕竟是jQuery之父，不愧是能想出jQuery.prototype.init.prototype = jQuery.prototype的人，代码之精妙（变态），短短几行代码里就包含着闭包和回溯两种思想。</p>
<p>让我们来逐行分析一下。</p>
<p>首先来看function addMethod(),开始首先定义了一个变量ex，这个变量提取的是“上次”我们所定义的对象的方法，这个“上次”很神奇，<br>我感觉这也正是这种重构方法的神来之笔。具体下文中会讲到。然后接下来就是给我们要添加的对象的方法赋值了，我们赋予它一个function<br>如果你调用的方法中的参数数量与你刚刚定义的方法中的参数数量相等，那么恭喜你，不需要繁杂的回溯过程了，可以直接调用。否则，则用<br>你上一轮定义的方法让这个流程再走一遍，直到找到满足第一个条件或者没有符合的条件遍历失败结束。</p>
<p>这种方法好处是有的，就是可以使用一个addMethod()函数轻松给任意对象添加任意方法，但弊端也很多，比如这种方法只能根据参数的多少来<br>完成重构，并不能识别参数的类型。而且这种方法对性能要求较高，因为每失败一次都要去遍历之前的方法。</p>`
}, {
  "id": 15,
  "date": +new Date('2018-4-19'),
  "visit": 120,
  "title": `jQuery的诞生`,
  "cover": 'https://lixiaotiancai.github.io/images/firstBlogPic.jpg',
  "intro": 'jQuery的诞生',
  "content": `<p>最近看jquery源码看的脑袋疼。。。</p>
<p>偶然看到一个大佬的博客觉得写得不错，讲的是关于jquery是怎么来的，写的很循序渐进，我决定跟着做一遍。</p>
<p>现在有个页面，我想button添加一个功能，点击button，p就会变红。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p id=&quot;p1&quot;&gt;我是p1&lt;/p&gt;</span><br><span class="line">&lt;p id=&quot;p2&quot;&gt;我是p2&lt;/p&gt;</span><br><span class="line">&lt;button type=&quot;button&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var p1 = document.getElementById(&quot;p1&quot;),</span><br><span class="line">    p2 = document.getElementById(&quot;p2&quot;),</span><br><span class="line">    button = document.getElementById(&quot;button&quot;);</span><br><span class="line"></span><br><span class="line">button.onclick = function()&#123;</span><br><span class="line">    p1.style.color = &quot;red&quot;;</span><br><span class="line">    p2.style.color = &quot;red&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>两个document.getElementById()，太麻烦了，我想把这部分抽出去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var $ = function(id)&#123;</span><br><span class="line">    return document.getElementById(id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(&quot;button&quot;).onclick = function()&#123;</span><br><span class="line">    $(&quot;p1&quot;).style.color = &quot;red&quot;;</span><br><span class="line">    $(&quot;p2&quot;).style.color = &quot;red&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>看上去简单多了,不过button的函数定义部分还是有些复杂，把<code>.style.color = &quot;red&quot;</code>这部分也抽出去变成一个函数吧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var $ = function(id)&#123;</span><br><span class="line">    return document.getElementById(id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function red(id)&#123;</span><br><span class="line">     id.style.color = &quot;red&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(&quot;button&quot;).onclick = function()&#123;</span><br><span class="line">    red($(&quot;p1&quot;));</span><br><span class="line">    red($(&quot;p1&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>好多了，但我想变一种形式，把red作为一种方法，变成<code>.red()</code>的形式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var $ = function(id)&#123;</span><br><span class="line">    return document.getElementById(id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HTMLElement.prototype.red = function()&#123;</span><br><span class="line">    this.style.color = &quot;red&quot;</span><br><span class="line">&#125;</span><br><span class="line">HTMLElement.prototype.hide </span><br><span class="line">$(&quot;button&quot;).onclick = function()&#123;</span><br><span class="line">    $(&quot;p1&quot;).red();</span><br><span class="line">    $(&quot;p2&quot;).red();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>不错！但奈何IE6~IE8这些老前辈不知道HTMLElment是什么东西，因此这种方法不兼容IE6~IE8，好在function.prototype他们还是知道的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var F = function(id)&#123;</span><br><span class="line">    this.element = document.getElementById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">F.prototype.red = function()&#123;</span><br><span class="line">    this.element.style.color = &quot;red&quot;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">document.getElementById(&quot;button&quot;).onclick = function()&#123;</span><br><span class="line">   new F(&quot;p1&quot;).red();</span><br><span class="line">   new F(&quot;p2&quot;).red();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>好了，现在终于解决了兼容性问题，不过id获取这段是写在私有方法里的，不能继承，干脆把这段也给写进原型里吧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var F = function(id)&#123;</span><br><span class="line">    return this.getElementById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">F.prototype.getElementById = function(id)&#123;</span><br><span class="line">    this.element = document.getElementById(id);</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">F.prototype.red = function()&#123;</span><br><span class="line">    this.element.style.color = &quot;red&quot;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">new F(&quot;button&quot;).element.onclick = function()&#123;</span><br><span class="line">   new F(&quot;p1&quot;).red();</span><br><span class="line">   new F(&quot;p2&quot;).red();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但每生成一个新实例就要new一个，很麻烦，干脆定义一个函数直接可以返回实例，这样就不用new了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var F = function(id)&#123;</span><br><span class="line">    return this.getElementById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">F.prototype.getElementById = function(id)&#123;</span><br><span class="line">    this.element = document.getElementById(id);</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">F.prototype.red = function()&#123;</span><br><span class="line">    this.element.style.color = &quot;red&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var $ = function(id)&#123;</span><br><span class="line">    return new F(id);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$(&quot;button&quot;).element.onclick = function()&#123;</span><br><span class="line">   $(&quot;p1&quot;).red();</span><br><span class="line">   $(&quot;p2&quot;).red();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以，当我们现在不单单满足于id选择器了，我们想选择标签或者样式什么都可以，碰巧有个叫querySelector的好东西：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var F = function(selector,context)&#123;</span><br><span class="line">    return this.getNodeList(selector,context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">F.prototype.getNodeList = function(selector,context)&#123;</span><br><span class="line">    context = context || document;</span><br><span class="line">    this.element = context.querySelectorAll(selector);</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">F.prototype.red = function()&#123;</span><br><span class="line">    this.element[0].style.color = &quot;red&quot;;</span><br><span class="line">    this.element[1].style.color = &quot;red&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var $ = function(selector,context)&#123;</span><br><span class="line">    return new F(selector,context);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$(&quot;button&quot;).element[0].onclick = function()&#123;</span><br><span class="line">   $(&quot;p&quot;).red();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以，我们现在连标签都可以选中了，不过要注意的是querySelectorAll返回的是一个类数组，所以要用数组下标的形式来调用，这里我们<br>再用一个循环来简化一下繁琐的类数组赋值操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var F = function(selector,context)&#123;</span><br><span class="line">    return this.getNodeList(selector,context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">F.prototype.getNodeList = function(selector,context)&#123;</span><br><span class="line">    context = context || document;</span><br><span class="line">    this.element = context.querySelectorAll(selector);</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">F.prototype.red = function()&#123;</span><br><span class="line">    var i = 0;</span><br><span class="line">    for( ; i&lt;this.element.length;i++)&#123;</span><br><span class="line">        this.element[i].style.color = &quot;red&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var $ = function(selector,context)&#123;</span><br><span class="line">    return new F(selector,context);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$(&quot;button&quot;).element[0].onclick = function()&#123;</span><br><span class="line">   $(&quot;p&quot;).red();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们再增加一个遍历element用的each方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">var F = function(selector,context)&#123;</span><br><span class="line">    return this.getNodeList(selector,context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">F.prototype.getNodeList = function(selector,context)&#123;</span><br><span class="line">    context = context || document;</span><br><span class="line">    this.element = context.querySelectorAll(selector);</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line">F.prototype.each = function(fn) &#123;</span><br><span class="line">    var i=0, length = this.element.length;</span><br><span class="line">    for (; i&lt;length; i+=1) &#123;</span><br><span class="line">        fn.call(this.element[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return this;</span><br><span class="line">&#125;;</span><br><span class="line">F.prototype.red = function()&#123;</span><br><span class="line">   this.each(function()&#123;</span><br><span class="line">       this.style.color = &quot;red&quot;;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var $ = function(selector,context)&#123;</span><br><span class="line">    return new F(selector,context);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$(&quot;button&quot;).element[0].onclick = function()&#123;</span><br><span class="line">   $(&quot;p&quot;).red();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们吧each方法中的element[i]扔到getNodeList中去，在吧getNodeList改一个高大上的名字init：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">var F = function(selector,context)&#123;</span><br><span class="line">    return this.init(selector,context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">F.prototype.init = function(selector,context)&#123;</span><br><span class="line">    context = context || document;</span><br><span class="line">    this.element = context.querySelectorAll(selector);</span><br><span class="line">    for(var i=0 ;i&lt;this.element.length;i++)&#123;</span><br><span class="line">        this[i] = this.element[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line">F.prototype.each = function(fn) &#123;</span><br><span class="line">    var i=0, length = this.element.length;</span><br><span class="line">    for (; i&lt;length; i+=1) &#123;</span><br><span class="line">        fn.call(this[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return this;</span><br><span class="line">&#125;;</span><br><span class="line">F.prototype.red = function()&#123;</span><br><span class="line">   this.each(function()&#123;</span><br><span class="line">       this.style.color = &quot;red&quot;;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var $ = function(selector,context)&#123;</span><br><span class="line">    return new F(selector,context);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$(&quot;button&quot;).element[0].onclick = function()&#123;</span><br><span class="line">   $(&quot;p&quot;).red();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来我们把所有F换成$，但奈何$已经被用了，那只好把F变成$的一种方法$.fn了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">var $ = function(selector,context)&#123;</span><br><span class="line">    return new $.fn(selector,context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.fn = function(selector,context)&#123;</span><br><span class="line">    return this.init(selector,context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.fn.prototype.init = function(selector,context)&#123;</span><br><span class="line">    context = context || document;</span><br><span class="line">    this.element = context.querySelectorAll(selector);</span><br><span class="line">    for(var i=0 ;i&lt;this.element.length;i++)&#123;</span><br><span class="line">        this[i] = this.element[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line">$.fn.prototype.each = function(fn) &#123;</span><br><span class="line">    var i=0, length = this.element.length;</span><br><span class="line">    for (; i&lt;length; i+=1) &#123;</span><br><span class="line">        fn.call(this[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return this;</span><br><span class="line">&#125;;</span><br><span class="line">$.fn.prototype.red = function()&#123;</span><br><span class="line">   this.each(function()&#123;</span><br><span class="line">       this.style.color = &quot;red&quot;;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">$(&quot;button&quot;).element[0].onclick = function()&#123;</span><br><span class="line">   $(&quot;p&quot;).red();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是这样扩展的时候显得会很麻烦，要<code>$.fn.protoype.method = function(){some method...}</code>这样，那干脆让<code>$.fn = $.prototype</code>这样就好了，这样扩展时直接<br><code>$,fn,method = function(){some method...}</code>这样就好了。于是代码又变成了这样：（此段是伪代码，不能运行）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">var $ = function(selector,context)&#123;</span><br><span class="line">    return new F(selector,context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">F = function(selector,context)&#123;</span><br><span class="line">    return this.init(selector,context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.fn = $.prototype;</span><br><span class="line"></span><br><span class="line">$.fn.init = function(selector,context)&#123;</span><br><span class="line">    context = context || document;</span><br><span class="line">    this.element = context.querySelectorAll(selector);</span><br><span class="line">    for(var i=0 ;i&lt;this.element.length;i++)&#123;</span><br><span class="line">        this[i] = this.element[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line">$.fn.each = function(fn) &#123;</span><br><span class="line">    var i=0, length = this.element.length;</span><br><span class="line">    for (; i&lt;length; i+=1) &#123;</span><br><span class="line">        fn.call(this[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return this;</span><br><span class="line">&#125;;</span><br><span class="line">$.fn.red = function()&#123;</span><br><span class="line">   this.each(function()&#123;</span><br><span class="line">       this.style.color = &quot;red&quot;;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">$(&quot;button&quot;).element[0].onclick = function()&#123;</span><br><span class="line">   $(&quot;p&quot;).red();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时我们发现开头的地方有点像在转圈圈，$返回的是F的实例，而F返回的是$.fn上的定义的init实例，而且传递的函数都是一样的，那我们何不把中间抽掉，直接让<br>$返回$.fn.init的实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">var $ = function(selector,context)&#123;</span><br><span class="line">    return new $.fn.init(selector,context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.fn = $.prototype;</span><br><span class="line"></span><br><span class="line">$.fn.init = function(selector,context)&#123;</span><br><span class="line">    context = context || document;</span><br><span class="line">    this.element = context.querySelectorAll(selector);</span><br><span class="line">    for(var i=0 ;i&lt;this.element.length;i++)&#123;</span><br><span class="line">        this[i] = this.element[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line">$.fn.each = function(fn) &#123;</span><br><span class="line">    var i=0, length = this.element.length;</span><br><span class="line">    for (; i&lt;length; i+=1) &#123;</span><br><span class="line">        fn.call(this[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return this;</span><br><span class="line">&#125;;</span><br><span class="line">$.fn.red = function()&#123;</span><br><span class="line">   this.each(function()&#123;</span><br><span class="line">       this.style.color = &quot;red&quot;;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">$(&quot;button&quot;).element[0].onclick = function()&#123;</span><br><span class="line">   $(&quot;p&quot;).red();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是又出问题，他说onclick不是一个function，也就是说他访问不到我们定义的red()，这又是为什么呢？原因是我们在$.fn.init中的this是指向我们的init的，而我们的red则是定义<br>在$.fn上，当然访问不到了，这时我们只要让$.fn.init的原型指向$的原型就行了，而$.fn又恰好=$.prototype，因此这样就能访问到定义在fn上的方法了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">var $ = function(selector,context)&#123;</span><br><span class="line">    return new $.fn.init(selector,context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.fn = $.prototype;</span><br><span class="line"></span><br><span class="line">$.fn.init = function(selector,context)&#123;</span><br><span class="line">    context = context || document;</span><br><span class="line">    this.element = context.querySelectorAll(selector);</span><br><span class="line">    for(var i=0 ;i&lt;this.element.length;i++)&#123;</span><br><span class="line">        this[i] = this.element[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line">$.fn.each = function(fn) &#123;</span><br><span class="line">    var i=0, length = this.element.length;</span><br><span class="line">    for (; i&lt;length; i+=1) &#123;</span><br><span class="line">        fn.call(this[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return this;</span><br><span class="line">&#125;;</span><br><span class="line">$.fn.red = function()&#123;</span><br><span class="line">   this.each(function()&#123;</span><br><span class="line">       this.style.color = &quot;red&quot;;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.fn.init.prototype = $.prototype;</span><br><span class="line"></span><br><span class="line">$(&quot;button&quot;).element[0].onclick = function()&#123;</span><br><span class="line">   $(&quot;p&quot;).red();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们现在已经有了each和red两种方法了，以后还会有更多的方法，总不能每扩展一次方法就来一次$.fn.method = …吧，于是想了个办法，设一个extend方法：(伪代码)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">var $ = function(selector,context)&#123;</span><br><span class="line">    return new $.fn.init(selector,context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.fn = $.prototype;</span><br><span class="line"></span><br><span class="line">$.fn.init = function(selector,context)&#123;</span><br><span class="line">    context = context || document;</span><br><span class="line">    this.element = context.querySelectorAll(selector);</span><br><span class="line">    for(var i=0 ;i&lt;this.element.length;i++)&#123;</span><br><span class="line">        this[i] = this.element[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line">$.fn.extend(&#123;</span><br><span class="line">    red: ...,</span><br><span class="line">    each: ...,</span><br><span class="line">    css: ...,</span><br><span class="line">    click: ....,</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$.fn.init.prototype = $.prototype;</span><br><span class="line"></span><br><span class="line">$(&quot;button&quot;).element[0].onclick = function()&#123;</span><br><span class="line">   $(&quot;p&quot;).red();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当然为了防止全局变量污染，我们选择把这段代码放入一个立即执行函数中，还有值得注意的是IE6/IE7不认识querySelectorAll，所以jquery用了强大<br>的Sizzle的选择器引擎。</p>
<p>一个微型的jquery就这样诞生了！</p>
`
}, {
  "id": 16,
  "date": +new Date('2018-4-21'),
  "visit": 100,
  "title": `HTML meta标签总结与属性使用介绍`,
  "cover": 'https://lixiaotiancai.github.io/images/firstBlogPic.jpg',
  "intro": 'HTML meta标签总结与属性使用介绍',
  "content": `
  <h2>简介</h2>

<p>想看谷歌对meta标签的解释：<br>The <meta> tag provides metadata about the HTML document. Metadata will not be displayed on the page,but will be machine parsable.<br>翻译过来就是：<br>meta标签提供了一个叫metadata的元数据，也就是用于描述数据的数据。他不会显示在页面上，但是机器却可以识别。</p>
<p>用处：<br>meta常用于定义页面的说明，关键字，最后修改日期，和其他的元数据。这些元数据服务于浏览器（如何布局或重载页面），搜索引擎和其他网络<br>服务。</p>
<h2>组成</h2>

<p>meta标签一共有两个属性，分别是http-equiv属性和name属性。</p>
<h3>name属性</h3>

<p>name属性主要用于描述网页，比如网页的关键词，叙述等。与之对应的属性值为content，content中的内容是对name填入类型的具体描述，便于搜索<br>引擎的抓取。</p>
<p>meta标签中name属性语法格式是：<br><code>&lt;meta name=&quot;参数&quot; content=&quot;具体的描述&quot;&gt;</code></p>
<p>其中name属性共有以下几种参数。</p>
<p>1.keywords<br>说明：用于告诉搜索引擎，你网页的关键字。<br>eg <code>&lt;meta name=&quot;keywords&quot; content=&quot;李骁，博客，前端&quot;&gt;</code></p>
<p>2.description<br>说明：用于告诉搜索引擎，你网站的主要内容。<br>eg <code>&lt;meta name=&quot;description&quot; content=&quot;李骁，这里是我的个人博客&quot;&gt;</code></p>
<p>3.viewport<br>说明：这个属性常用于设计移动端网页，在用bootstrap，AmazeUI等框架时都有用过viewport。<br>eg <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, intial-scale=1&quot;&gt;</code></p>
<p>4.robots<br>说明：robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。content的参数有all，index，noindex，follow，nofollow。默认是all。<br>eg <code>&lt;meta name=&quot;robots&quot; content=&quot;none&quot;&gt;</code><br>具体参数如下：<br>  1.none：搜索引擎将忽略此网页，等价于noindex，nofollow。<br>  2.noindex：搜索引擎不索引此网页。<br>  3.nofolllow：索引引擎不继续通过此网页的链接索引其他的网页。<br>  4.all：搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。<br>  5.index：搜索引擎索引此网页。<br>  6.follow：搜索引擎继续通过此网页的链接索引搜索其他的网页。</p>
<p>5.author<br>说明：用于标注网页作者。<br>eg：<code>&lt;meta name=&quot;author&quot; content=&quot;lixiao,1422975258@qq.com&quot;&gt;</code></p>
<p>6.generator<br>说明：用于表明网页是设么软件做的。<br>eg：<code>&lt;meta name=&quot;generator&quot; content=&quot;Sublime Text3&quot;&gt;</code></p>
<p>7.conpyright<br>说明：用于标注版权信息。<br>eg: <code>&lt;meta name=&quot;copyright&quot; content=&quot;lixiao&quot;&gt;</code></p>
<p>8.revisit-after(搜索引擎爬虫重访时间)<br>说明：如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按他们定义<br>的时间来访问。<br>eg: <code>&lt;meta name=&quot;revisit-after&quot; content=&quot;7 days&quot;&gt;</code></p>
<p>9.renderer(双核浏览器渲染方式)<br>说明：render是为双核浏览器准备的，用于指定双核浏览器默认以何种方式渲染页面。比如360浏览器。<br>eg：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;   //默认webkit内核</span><br><span class="line">&lt;meta name=&quot;renderer&quot; content=&quot;ie-comp&quot;&gt;  //默认IE兼容模式</span><br><span class="line">&lt;meta name=&quot;renderer&quot; content=&quot;ie-stand&quot;&gt; //默认IE标准模式</span><br></pre></td></tr></table></figure></p>
<h3>http-equiv</h3>

<p>相当于HTTP的作用，比如定义些HTTP参数啥的。</p>
<p>meta标签中的http-quiv属性语法格式是：<br><code>&lt;meta http-equiv=&quot;参数&quot; content=&quot;具体的描述&quot;&gt;</code></p>
<p>其中http-equiv属性主要有以下几种参数：</p>
<p>1.content-Type<br>说明：用于设定网页字符集，便于浏览器解析与渲染页面。<br>eg：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;content-Type&quot; content=&quot;text/html;charset=utf-8&quot;&gt; //旧的HTML，不推荐</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt; //HTML5设定网页字符集的方式，推荐使用UTF-8</span><br></pre></td></tr></table></figure></p>
<p>2.X-UA-Compatible（浏览器采取何种版本渲染当前页面）<br>说明：用于告诉浏览器以何种版本来渲染页面（一般都设置为最新模式，在各大框架中这个设置也很常见。）<br>eg：<code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt; //指定IE和Chrome使用最新版本渲染当前页面</code></p>
<p>3.cache-control(指定请求和响应遵循的缓存机制)<br>用法1：<br>说明：指导浏览器如何缓存某个响应以及缓存多长时间。<br>eg：<code>&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;</code><br>共有一下几种用法：<br>  1.no-cache:先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。<br>  2.no-store：不允许使用缓存，每次都要去服务器上，下载完整的响应。（安全措施）<br>  3.public：缓存所有响应，但并非必须。因为max-age也可以做到相同效果。<br>  4.private：只为单个用户缓存，因此不允许任何中继进行缓存。（比如CDN就不允许缓存private的响应）<br>  5.maxage：表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。 例如：max-age=60表示响应可以再缓存和重用60s。</p>
<p>用法2：禁止百度自动转码<br>说明：用于禁止当前页面在移动端浏览时，被百度自动转码。虽然百度的本意是好的，但是转码效果很多时候却不尽人意。所以可以再head中<br>加入以下这句来禁止百度转码。<br>eg: <code>&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no=siteapp&quot;&gt;</code></p>
<p>4.expires(网页到期时间)<br>说明：用于设定网页的到期时间，过期后网页必须到服务器上重新传输。<br>eg：<code>&lt;meta http-eqiv=&quot;expires&quot; contents=&quot;Sunday 26 October 2018 07:00 GMT&quot;&gt;</code></p>
<p>5.refresh(自动刷新并指向某网页)<br>说明：网页将在设定的时间内，自动刷新并调向设定的网址。<br>eg：<code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;2;URL=http://www.baidu.com&quot;&gt;</code></p>
<p>6.Set-Cookie<br>说明：如果网页过期。那么这个网页存在本地的cookies也会被自动删除。<br>eg:<code>&lt;meta http-equiv=&quot;Set-Cookie&quot; content=&quot;User=lixiao;path=/;expires=Sunday,10-Jan-16 10:00:00 GMT&quot;&gt;</code></p>`
}, {
  "id": 17,
  "date": +new Date('2018-4-21'),
  "visit": 100,
  "title": `浏览器内核`,
  "cover": 'https://lixiaotiancai.github.io/images/firstBlogPic.jpg',
  "intro": '浏览器内核',
  "content": `
    <p></p><h1>浏览器内核</h1><br>  浏览器最重要或者最核心的部分是“Rendering Engine”，可大概翻译为“渲染引擎”，不过我们一般习惯将之称为“浏览器内核”。<br>负责对网页语法的解释并渲染网页。所以，通常所谓的浏览器内核也就是浏览器所采用的渲染引擎，渲染引擎决定了浏览器如何显示网页的内容<br>以及页面的格式信息。不同的浏览器内核对网页编写语法的解释也有不同，因此同一网页在不同的内核的浏览器里的渲染效果也可能不同，这也是<br>网页编写者需要在不同内核的浏览器中测试网页显示效果的原因。<p></p>
<p></p><h2>Trident</h2><br>    Trident(IE内核)：该内核程序在1997年的IE4中首次被采用，是微软在Mosaic代码的基础之上修改而来的，并沿用到IE11，也被普遍称作”IE内核”。Trident实际上是一款开放的内核，其接口内核设计的相当成熟，因此才有许多采用IE内核而非IE的浏览器(壳浏览器)涌现。<br>由于IE本身的“垄断性”（虽然名义上IE并非垄断，但实际上，特别是从Windows 95年代一直到XP初期，就市场占有率来说IE的确借助Windows的东风处于“垄断”的地位）而使得Trident内核的长期一家独大，微软很长时间都并没有更新Trident内核，这导致了两个后果——一是Trident内核曾经几乎与W3C标准脱节（2005年），二是Trident内核的大量 Bug等安全性问题没有得到及时解决，然后加上一些致力于开源的开发者和一些学者们公开自己认为IE浏览器不安全的观点，也有很多用户转向了其他浏览器，Firefox和Opera就是这个时候兴起的。非Trident内核浏览器的市场占有率大幅提高也致使许多网页开发人员开始注意网页标准和非IE浏览器的浏览效果问题。<br>补充：IE从版本11开始，初步支持WebGL技术。IE8的JavaScript引擎是Jscript，IE9开始用Chakra，这两个版本区别很大，Chakra无论是速度和标准化方面都很出色。<br>Trident内核的常见浏览器有IE6~IE10,360安全浏览器（Trident+Webkit）等等。。。其中很多浏览器的新版本是双核或多核，其中一个内核是Trident，然后再增加一个其他内核。<br>国内的厂商一般把其他内核叫做“高速浏览模式”，而Trident则是“兼容浏览模式”，用户可以浪会切换。<p></p>
<p></p><h2>Gecko</h2><br>    Gecko(Firefox内核)：Netscape6开始采用的内核，后来的Mozilla FireFox(火狐浏览器) 也采用了该内核，Gecko的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。因为这是个开源内核，因此受到许多人的青睐，Gecko内核的浏览器也很多，这也是Gecko内核虽然年轻但市场占有率能够迅速提高的重要原因。<br>事实上，Gecko引擎的由来跟IE不无关系，前面说过IE没有使用W3C的标准，这导致了微软内部一些开发人员的不满；他们与当时已经停止更新了的 Netscape的一些员工一起创办了Mozilla，以当时的Mosaic内核为基础重新编写内核，于是开发出了Gecko。不过事实上，Gecko 内核的浏览器仍然还是Firefox (火狐) 用户最多，所以有时也会被称为Firefox内核。此外Gecko也是一个跨平台内核，可以在Windows、 BSD、Linux和Mac OS X中使用。<p></p>
<p></p><h2>Presto</h2><br>    Presto(Opera前内核) (已废弃)： Opera12.17及更早版本曾经采用的内核，现已停止开发并废弃，该内核在2003年的Opera7中首次被使用，该款引擎的特点就是渲染速度的优化达到了极致，然而代价是牺牲了网页的兼容性。<br>实际上这是一个动态内核，与前面几个内核的最大的区别就在脚本处理上，Presto有着天生的优势，页面的全部或者部分都能够在回应脚本事件时等情况下被重新解析。此外该内核在执行Javascrīpt的时候有着最快的速度，根据在同等条件下的测试，Presto内核执行同等Javascrīpt所需的时间仅有Trident和Gecko内核的约1/3（Trident内核最慢，不过两者相差没有多大），本文的其中一个修改者认为上述测试信息过于老旧且不完整，因为他曾做过的小测试显示Presto部分快部分慢，各内核总体相当。那次测试的时候因为Apple机的硬件条件和普通PC机不同所以没有测试WebCore内核。只可惜Presto是商业引擎，使用Presto的除开Opera以外，只剩下NDSBrowser、Wii Internet Channle、Nokia 770网络浏览器等，这很大程度上限制了Presto的发展。<br>Opera现已改用Google Chrome的Blink内核。<p></p>
<p></p><h2>Webkit</h2><br>    Webkit(Safari内核,Chrome内核原型,开源):它是苹果公司自己的内核，也是苹果的Safari浏览器使用的内核。 Webkit引擎包含WebCore排版引擎及JavaScriptCore解析引擎，均是从KDE的KHTML及KJS引擎衍生而来，它们都是自由软件，在GPL条约下授权，同时支持BSD系统的开发。所以Webkit也是自由软件，同时开放源代码。在安全方面不受IE、Firefox的制约，所以Safari浏览器在国内还是很安全的。<br>限于Mac OS X的使用不广泛和Safari浏览器曾经只是Mac OS X的专属浏览器，这个内核本身应该说市场范围并不大；但似乎根据最新的浏览器调查表明，该浏览器的市场甚至已经超过了Opera的Presto了——当然这一方面得益于苹果转到x86架构之后的人气暴涨，另外也是因为Safari 3终于推出了Windows版的缘故吧。Mac下还有OmniWeb、Shiira等人气很高的浏览器。<br>Google Chrome、360极速浏览器以及搜狗高速浏览器高速模式也使用Webkit作为内核(在脚本理解方面，Chrome使用自己研发的V8引擎)。WebKit 内核在手机上的应用也十分广泛，例如 Google 的手机 Gphone、 Apple 的iPhone， Nokia’s Series 60 browser 等所使用的 Browser 内核引擎，都是基于 WebKit。<br>WebKit内核常见的浏览器：傲游浏览器3、 [1]  Apple Safari (Win/Mac/iPhone/iPad)、Symbian手机浏览器、Android 默认浏览器。<p></p>
<p></p><h2>Blink</h2><br>    Blink是一个由Google和Opera Software开发的浏览器排版引擎，Google计划将这个渲染引擎作为Chromium计划的一部分，并且在2013年4月的时候公布了这一消息。这一渲染引擎是开源引擎WebKit中WebCore组件的一个分支，并且在Chrome（28及往后版本）、Opera（15及往后版本）和Yandex浏览器中使用。<br>相关新闻<br>2013年4月3日，谷歌在Chromium Blog上发表博客 [3]  ，称将与苹果的开源浏览器核心Webkit分道扬镳，在Chromium项目中研发Blink渲染引擎（即浏览器核心），内置于Chrome浏览器之中。<br>苹果在Safari中采用Webkit核心，并于2005年将Webkit公开为开源软件。谷歌当时采用苹果的Webkit核心打造了Chrome浏览器。Opera也宣布称将会转向Webkit核心，但是谷歌宣布此举后，Opera表示将会跟随谷歌采用其Blink浏览器核心，同时参与了Blink的开发。<br>谷歌转向研发Blink浏览器内核意义重大，谷歌此举欲降低Webkit即苹果在浏览器市场的影响力。截止2012年底，Webkit浏览器内核占总浏览器市场份额约40%。谷歌解释称，Chromium多处理架构系统与其他Webkit浏览器很不相同。谷歌工程师Adam Barth在博客 [3]  中表示，随着浏览器的发展，苹果的Webkit已经不能满足用户需求，同时也有碍浏览器技术的创新步伐。但是他也表示，谷歌自主研发Blink内核绝非易事，但是新内核将会提升整个开源网络生态系统的机能。谷歌做出此举之际，Mozilla与三星也达成合作协议开发“下一代”浏览器渲染引擎Servo。<p></p>
`
}, ]


for (let i = 18; i < 22; i++) {
  mock_data.push({
    "id": i,
    "date": +new Date(),
    "visit": Math.floor(Math.random() * 100),
    "title": `Test title ${i}`,
    "cover": 'http://imweb-io-1251594266.cos.ap-guangzhou.myqcloud.com/6842cd337d2e46f81020738301c8beb7.jpg',
    "intro": 'this is test article from mock blog data',
    "content": `
    <h1>acticle ${i}</h1>
    <p>this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} this is article ${i} </p>
    `
  })
}

module.exports = mock_data